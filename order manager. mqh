class OrderManager {
private:
    string          m_symbol;
    ENUM_SIGNAL     m_signal;
    double          m_lotSize;
    int             m_slippage;
    double          m_stopLoss;
    double          m_takeProfit;
    int             m_magicNumber;
    
    // Additional grid parameters
    double          m_gridStep;         // Grid step in points
    double          m_gridMultiplier;   // Lot multiplier for grid
    int             m_maxGridLevels;    // Maximum grid levels
    double          m_minProfit;        // Minimum profit to close grid
    
public:
    // Constructor with grid parameters
    OrderManager(string symbol = NULL, double gridStep = 200, double gridMultiplier = 1.5, int maxLevels = 5) {
        m_symbol = symbol == NULL ? Symbol() : symbol;
        m_signal = SIGNAL_NONE;
        m_lotSize = 0.1;
        m_slippage = 3;
        m_stopLoss = 100;
        m_takeProfit = 200;
        m_magicNumber = 123456;
        
        m_gridStep = gridStep;
        m_gridMultiplier = gridMultiplier;
        m_maxGridLevels = maxLevels;
        m_minProfit = 50;  // Default 50 points profit
    }
    
    // Grid Trading Methods
    bool OpenBuyGrid() {
        if(GetTotalBuyPositions() >= m_maxGridLevels) return false;
        
        double lastBuyPrice = GetLastBuyPrice();
        double currentPrice = SymbolInfoDouble(m_symbol, SYMBOL_ASK);
        double nextLot = CalculateNextGridLot(ORDER_TYPE_BUY);
        
        if(lastBuyPrice == 0 || currentPrice <= lastBuyPrice - m_gridStep * Point()) {
            MqlTradeRequest request = {};
            request.action = TRADE_ACTION_DEAL;
            request.symbol = m_symbol;
            request.volume = nextLot;
            request.type = ORDER_TYPE_BUY;
            request.price = currentPrice;
            request.deviation = m_slippage;
            request.magic = m_magicNumber;
            request.comment = "Grid Buy Level " + IntegerToString(GetTotalBuyPositions() + 1);
            
            MqlTradeResult result = {};
            return OrderSend(request, result);
        }
        return false;
    }
    
    bool OpenSellGrid() {
        if(GetTotalSellPositions() >= m_maxGridLevels) return false;
        
        double lastSellPrice = GetLastSellPrice();
        double currentPrice = SymbolInfoDouble(m_symbol, SYMBOL_BID);
        double nextLot = CalculateNextGridLot(ORDER_TYPE_SELL);
        
        if(lastSellPrice == 0 || currentPrice >= lastSellPrice + m_gridStep * Point()) {
            MqlTradeRequest request = {};
            request.action = TRADE_ACTION_DEAL;
            request.symbol = m_symbol;
            request.volume = nextLot;
            request.type = ORDER_TYPE_SELL;
            request.price = currentPrice;
            request.deviation = m_slippage;
            request.magic = m_magicNumber;
            request.comment = "Grid Sell Level " + IntegerToString(GetTotalSellPositions() + 1);
            
            MqlTradeResult result = {};
            return OrderSend(request, result);
        }
        return false;
    }
    
    // Martingale Methods
    bool OpenBuyMartingale() {
        double lastLoss = GetLastClosedLoss();
        if(lastLoss < 0) {
            double newLot = m_lotSize * m_gridMultiplier;
            return OpenPositionWithLot(ORDER_TYPE_BUY, newLot);
        }
        return OpenPositionWithLot(ORDER_TYPE_BUY, m_lotSize);
    }
    
    bool OpenSellMartingale() {
        double lastLoss = GetLastClosedLoss();
        if(lastLoss < 0) {
            double newLot = m_lotSize * m_gridMultiplier;
            return OpenPositionWithLot(ORDER_TYPE_SELL, newLot);
        }
        return OpenPositionWithLot(ORDER_TYPE_SELL, m_lotSize);
    }
    
    // Anti-Martingale Methods
    bool OpenBuyAntiMartingale() {
        double lastProfit = GetLastClosedProfit();
        if(lastProfit > 0) {
            double newLot = m_lotSize * m_gridMultiplier;
            return OpenPositionWithLot(ORDER_TYPE_BUY, newLot);
        }
        return OpenPositionWithLot(ORDER_TYPE_BUY, m_lotSize);
    }
    
    bool OpenSellAntiMartingale() {
        double lastProfit = GetLastClosedProfit();
        if(lastProfit > 0) {
            double newLot = m_lotSize * m_gridMultiplier;
            return OpenPositionWithLot(ORDER_TYPE_SELL, newLot);
        }
        return OpenPositionWithLot(ORDER_TYPE_SELL, m_lotSize);
    }
    
    // Hedging Methods
    bool OpenHedgePosition() {
        double totalBuyVolume = GetTotalBuyVolume();
        double totalSellVolume = GetTotalSellVolume();
        
        if(totalBuyVolume > totalSellVolume) {
            return OpenPositionWithLot(ORDER_TYPE_SELL, totalBuyVolume - totalSellVolume);
        }
        else if(totalSellVolume > totalBuyVolume) {
            return OpenPositionWithLot(ORDER_TYPE_BUY, totalSellVolume - totalBuyVolume);
        }
        return false;
    }
    
    // Recovery Methods
    bool OpenRecoveryPosition() {
        double totalLoss = GetTotalFloatingLoss();
        if(totalLoss < 0) {
            double recoveryLot = MathAbs(totalLoss) / (m_stopLoss * Point());
            return OpenPositionWithLot(ORDER_TYPE_BUY, recoveryLot);
        }
        return false;
    }
    
    // Position Management Methods
    double GetTotalBuyVolume() {
        double volume = 0;
        for(int i = PositionsTotal() - 1; i >= 0; i--) {
            ulong ticket = PositionGetTicket(i);
            if(PositionSelectByTicket(ticket)) {
                if(PositionGetString(POSITION_SYMBOL) == m_symbol && 
                   PositionGetInteger(POSITION_TYPE) == POSITION_TYPE_BUY) {
                    volume += PositionGetDouble(POSITION_VOLUME);
                }
            }
        }
        return volume;
    }
    
    double GetTotalSellVolume() {
        double volume = 0;
        for(int i = PositionsTotal() - 1; i >= 0; i--) {
            ulong ticket = PositionGetTicket(i);
            if(PositionSelectByTicket(ticket)) {
                if(PositionGetString(POSITION_SYMBOL) == m_symbol && 
                   PositionGetInteger(POSITION_TYPE) == POSITION_TYPE_SELL) {
                    volume += PositionGetDouble(POSITION_VOLUME);
                }
            }
        }
        return volume;
    }
    
    int GetTotalBuyPositions() {
        int count = 0;
        for(int i = PositionsTotal() - 1; i >= 0; i--) {
            ulong ticket = PositionGetTicket(i);
            if(PositionSelectByTicket(ticket)) {
                if(PositionGetString(POSITION_SYMBOL) == m_symbol && 
                   PositionGetInteger(POSITION_TYPE) == POSITION_TYPE_BUY) {
                    count++;
                }
            }
        }
        return count;
    }
    
    int GetTotalSellPositions() {
        int count = 0;
        for(int i = PositionsTotal() - 1; i >= 0; i--) {
            ulong ticket = PositionGetTicket(i);
            if(PositionSelectByTicket(ticket)) {
                if(PositionGetString(POSITION_SYMBOL) == m_symbol && 
                   PositionGetInteger(POSITION_TYPE) == POSITION_TYPE_SELL) {
                    count++;
                }
            }
        }
        return count;
    }
    
private:
    double GetLastBuyPrice() {
        double price = 0;
        datetime lastTime = 0;
        
        for(int i = PositionsTotal() - 1; i >= 0; i--) {
            ulong ticket = PositionGetTicket(i);
            if(PositionSelectByTicket(ticket)) {
                if(PositionGetString(POSITION_SYMBOL) == m_symbol && 
                   PositionGetInteger(POSITION_TYPE) == POSITION_TYPE_BUY) {
                    datetime openTime = (datetime)PositionGetInteger(POSITION_TIME);
                    if(openTime > lastTime) {
                        price = PositionGetDouble(POSITION_PRICE_OPEN);
                        lastTime = openTime;
                    }
                }
            }
        }
        return price;
    }
    
    double GetLastSellPrice() {
        double price = 0;
        datetime lastTime = 0;
        
        for(int i = PositionsTotal() - 1; i >= 0; i--) {
            ulong ticket = PositionGetTicket(i);
            if(PositionSelectByTicket(ticket)) {
                if(PositionGetString(POSITION_SYMBOL) == m_symbol && 
                   PositionGetInteger(POSITION_TYPE) == POSITION_TYPE_SELL) {
                    datetime openTime = (datetime)PositionGetInteger(POSITION_TIME);
                    if(openTime > lastTime) {
                        price = PositionGetDouble(POSITION_PRICE_OPEN);
                        lastTime = openTime;
                    }
                }
            }
        }
        return price;
    }
    
    double CalculateNextGridLot(ENUM_ORDER_TYPE type) {
        int positions = (type == ORDER_TYPE_BUY) ? GetTotalBuyPositions() : GetTotalSellPositions();
        return m_lotSize * MathPow(m_gridMultiplier, positions);
    }
    
    double GetLastClosedLoss() {
        // Implementation for getting last closed loss
        // This would require history access
        return 0;
    }
    
    double GetLastClosedProfit() {
        // Implementation for getting last closed profit
        // This would require history access
        return 0;
    }
    
    double GetTotalFloatingLoss() {
        double totalLoss = 0;
        for(int i = PositionsTotal() - 1; i >= 0; i--) {
            ulong ticket = PositionGetTicket(i);
            if(PositionSelectByTicket(ticket)) {
                if(PositionGetString(POSITION_SYMBOL) == m_symbol) {
                    double profit = PositionGetDouble(POSITION_PROFIT);
                    if(profit < 0) totalLoss += profit;
                }
            }
        }
        return totalLoss;
    }
    
    bool OpenPositionWithLot(ENUM_ORDER_TYPE type, double lot) {
        double price = (type == ORDER_TYPE_BUY) ? 
            SymbolInfoDouble(m_symbol, SYMBOL_ASK) : 
            SymbolInfoDouble(m_symbol, SYMBOL_BID);
            
        MqlTradeRequest request = {};
        request.action = TRADE_ACTION_DEAL;
        request.symbol = m_symbol;
        request.volume = lot;
        request.type = type;
        request.price = price;
        request.deviation = m_slippage;
        request.magic = m_magicNumber;
        
        MqlTradeResult result = {};
        return OrderSend(request, result);
    }
};

// Implementation of the grid strategy methods
bool OpenGeometricBuyGrid() {
    int currentPositions = GetTotalBuyPositions();
    if(currentPositions >= m_maxGridLevels) return false;
    
    double lastPrice = GetLastBuyPrice();
    double currentPrice = SymbolInfoDouble(m_symbol, SYMBOL_ASK);
    
    // For first position
    if(currentPositions == 0) {
        return OpenPositionWithLot(ORDER_TYPE_BUY, m_lotSize);
    }
    
    // Check if price moved enough for next grid level
    double gridDistance = m_gridStep * MathPow(m_gridMultiplier, currentPositions - 1) * Point();
    if(currentPrice <= lastPrice - gridDistance) {
        double nextLot = m_lotSize * MathPow(m_gridMultiplier, currentPositions);
        return OpenPositionWithLot(ORDER_TYPE_BUY, nextLot);
    }
    
    return false;
}

bool OpenFibonacciBuyGrid() {
    int currentPositions = GetTotalBuyPositions();
    if(currentPositions >= m_maxGridLevels) return false;
    
    double lastPrice = GetLastBuyPrice();
    double currentPrice = SymbolInfoDouble(m_symbol, SYMBOL_ASK);
    
    // Calculate Fibonacci multiplier
    double fibo = GetFibonacciMultiplier(currentPositions);
    
    // For first position
    if(currentPositions == 0) {
        return OpenPositionWithLot(ORDER_TYPE_BUY, m_lotSize);
    }
    
    // Check if price moved enough for next grid level
    double gridDistance = m_gridStep * fibo * Point();
    if(currentPrice <= lastPrice - gridDistance) {
        double nextLot = m_lotSize * fibo;
        return OpenPositionWithLot(ORDER_TYPE_BUY, nextLot);
    }
    
    return false;
}

bool OpenDynamicBuyGrid() {
    int currentPositions = GetTotalBuyPositions();
    if(currentPositions >= m_maxGridLevels) return false;
    
    double lastPrice = GetLastBuyPrice();
    double currentPrice = SymbolInfoDouble(m_symbol, SYMBOL_ASK);
    double atr = CalculateATR(14); // 14-period ATR
    
    // For first position
    if(currentPositions == 0) {
        return OpenPositionWithLot(ORDER_TYPE_BUY, m_lotSize);
    }
    
    // Dynamic grid step based on ATR
    double dynamicStep = atr * m_gridMultiplier;
    if(currentPrice <= lastPrice - dynamicStep) {
        double volatilityRatio = atr / (m_gridStep * Point());
        double nextLot = m_lotSize * MathPow(m_gridMultiplier, currentPositions) * volatilityRatio;
        nextLot = MathMin(nextLot, m_pyramidMaxLot); // Limit maximum lot size
        
        return OpenPositionWithLot(ORDER_TYPE_BUY, nextLot);
    }
    
    return false;
}

// Helper methods for grid calculations
double GetFibonacciMultiplier(int level) {
    if(level <= 1) return 1.0;
    
    double fibo1 = 1.0;
    double fibo2 = 1.0;
    double fiboN = 1.0;
    
    for(int i = 2; i <= level; i++) {
        fiboN = fibo1 + fibo2;
        fibo1 = fibo2;
        fibo2 = fiboN;
    }
    
    return fiboN;
}

double CalculateATR(int period) {
    double atr = 0.0;
    MqlRates rates[];
    ArraySetAsSeries(rates, true);
    
    if(CopyRates(m_symbol, PERIOD_CURRENT, 0, period + 1, rates) > 0) {
        double tr = 0.0;
        for(int i = 0; i < period; i++) {
            double high = rates[i].high;
            double low = rates[i].low;
            double prevClose = rates[i + 1].close;
            
            tr += MathMax(high - low, MathMax(MathAbs(high - prevClose), MathAbs(low - prevClose)));
        }
        atr = tr / period;
    }
    
    return atr;
}

// Implementation of advanced position management
bool ManageGridPositions() {
    if(!CheckGridProfitTarget()) {
        if(IsVolatilityHigh()) {
            CloseAllGridPositions();
            return true;
        }
        
        if(ShouldAdjustGridLevels()) {
            AdjustGridLevels();
        }
    }
    
    return UpdateGridStopLevels();
}

bool CheckGridProfitTarget() {
    double totalProfit = 0.0;
    double totalVolume = 0.0;
    
    for(int i = PositionsTotal() - 1; i >= 0; i--) {
        ulong ticket = PositionGetTicket(i);
        if(PositionSelectByTicket(ticket)) {
            if(PositionGetString(POSITION_SYMBOL) == m_symbol && 
               PositionGetInteger(POSITION_MAGIC) == m_magicNumber) {
                totalProfit += PositionGetDouble(POSITION_PROFIT);
                totalVolume += PositionGetDouble(POSITION_VOLUME);
            }
        }
    }
    
    double averageProfit = totalVolume > 0 ? totalProfit / totalVolume : 0;
    return averageProfit >= m_minProfit * Point();
}

bool IsVolatilityHigh() {
    double atr = CalculateATR(14);
    double averageATR = CalculateAverageATR(14, 5); // 5-period average of 14-period ATR
    
    return atr > averageATR * 1.5; // Volatility is 50% higher than average
}

double CalculateAverageATR(int atrPeriod, int avgPeriod) {
    double sum = 0.0;
    for(int i = 0; i < avgPeriod; i++) {
        sum += CalculateATR(atrPeriod);
    }
    return sum / avgPeriod;
}

bool ShouldAdjustGridLevels() {
    int positions = GetTotalPositions();
    if(positions <= 1) return false;
    
    double averageDistance = GetAverageGridDistance();
    double currentVolatility = CalculateATR(14);
    
    // Adjust if grid distance is too small compared to volatility
    return averageDistance < currentVolatility * 0.5;
}

double GetAverageGridDistance() {
    double totalDistance = 0.0;
    int count = 0;
    double lastPrice = 0.0;
    
    for(int i = PositionsTotal() - 1; i >= 0; i--) {
        ulong ticket = PositionGetTicket(i);
        if(PositionSelectByTicket(ticket)) {
            if(PositionGetString(POSITION_SYMBOL) == m_symbol && 
               PositionGetInteger(POSITION_MAGIC) == m_magicNumber) {
                double price = PositionGetDouble(POSITION_PRICE_OPEN);
                if(lastPrice > 0) {
                    totalDistance += MathAbs(price - lastPrice);
                    count++;
                }
                lastPrice = price;
            }
        }
    }
    
    return count > 0 ? totalDistance / count : 0;
}

bool AdjustGridLevels() {
    double currentVolatility = CalculateATR(14);
    m_gridStep = currentVolatility / Point() * 0.5; // Set grid step to half of ATR
    
    return ModifyGridPositions();
}

bool ModifyGridPositions() {
    bool success = true;
    double basePrice = GetAverageEntryPrice();
    
    for(int i = PositionsTotal() - 1; i >= 0; i--) {
        ulong ticket = PositionGetTicket(i);
        if(PositionSelectByTicket(ticket)) {
            if(PositionGetString(POSITION_SYMBOL) == m_symbol && 
               PositionGetInteger(POSITION_MAGIC) == m_magicNumber) {
                double sl = CalculateGridStopLoss(basePrice, PositionGetInteger(POSITION_TYPE));
                double tp = CalculateGridTakeProfit(basePrice, PositionGetInteger(POSITION_TYPE));
                
                success &= ModifyPosition(ticket, sl, tp);
            }
        }
    }
    
    return success;
}

double GetAverageEntryPrice() {
    double totalVolume = 0.0;
    double volumePrice = 0.0;
    
    for(int i = PositionsTotal() - 1; i >= 0; i--) {
        ulong ticket = PositionGetTicket(i);
        if(PositionSelectByTicket(ticket)) {
            if(PositionGetString(POSITION_SYMBOL) == m_symbol && 
               PositionGetInteger(POSITION_MAGIC) == m_magicNumber) {
                double volume = PositionGetDouble(POSITION_VOLUME);
                totalVolume += volume;
                volumePrice += volume * PositionGetDouble(POSITION_PRICE_OPEN);
            }
        }
    }
    
    return totalVolume > 0 ? volumePrice / totalVolume : 0;
}

double CalculateGridStopLoss(double basePrice, int positionType) {
    double atr = CalculateATR(14);
    double stopDistance = atr * 2; // 2 ATR stop loss
    
    return positionType == POSITION_TYPE_BUY ? 
        basePrice - stopDistance : 
        basePrice + stopDistance;
}

double CalculateGridTakeProfit(double basePrice, int positionType) {
    double atr = CalculateATR(14);
    double profitDistance = atr * 3; // 3 ATR take profit
    
    return positionType == POSITION_TYPE_BUY ? 
        basePrice + profitDistance : 
        basePrice - profitDistance;
}

bool UpdateGridStopLevels() {
    if(!HasOpenPositions()) return true;
    
    double basePrice = GetAverageEntryPrice();
    double atr = CalculateATR(14);
    
    return ModifyGridPositions();
}

bool HasOpenPositions() {
    for(int i = PositionsTotal() - 1; i >= 0; i--) {
        ulong ticket = PositionGetTicket(i);
        if(PositionSelectByTicket(ticket)) {
            if(PositionGetString(POSITION_SYMBOL) == m_symbol && 
               PositionGetInteger(POSITION_MAGIC) == m_magicNumber) {
                return true;
            }
        }
    }
    return false;
}


class OrderManager {
private:
    string          m_symbol;
    double          m_lotSize;
    int             m_slippage;
    double          m_stopLoss;
    double          m_takeProfit;
    int             m_magicNumber;
    
    // Grid parameters
    double          m_gridStep;
    double          m_gridMultiplier;
    int             m_maxGridLevels;
    double          m_minProfit;
    
    // Pyramiding parameters
    double          m_pyramidStep;
    double          m_pyramidMaxLot;
    int             m_pyramidMaxLevels;
    
    // Breakeven parameters
    double          m_breakEvenProfit;
    double          m_breakEvenPadding;
    
    // Trailing parameters
    double          m_trailingStart;
    double          m_trailingStep;
    
    // DCA parameters
    double          m_dcaMultiplier;
    double          m_dcaStep;
    int             m_dcaMaxLevels;
    
public:
    // Constructor with extended parameters
    OrderManager(string symbol = NULL) {
        m_symbol = symbol == NULL ? Symbol() : symbol;
        m_lotSize = 0.1;
        m_slippage = 3;
        m_stopLoss = 100;
        m_takeProfit = 200;
        m_magicNumber = 123456;
        
        // Initialize grid parameters
        m_gridStep = 200;
        m_gridMultiplier = 1.5;
        m_maxGridLevels = 5;
        m_minProfit = 50;
        
        // Initialize pyramiding parameters
        m_pyramidStep = 100;
        m_pyramidMaxLot = 1.0;
        m_pyramidMaxLevels = 3;
        
        // Initialize breakeven parameters
        m_breakEvenProfit = 100;
        m_breakEvenPadding = 10;
        
        // Initialize trailing parameters
        m_trailingStart = 100;
        m_trailingStep = 20;
        
        // Initialize DCA parameters
        m_dcaMultiplier = 2.0;
        m_dcaStep = 100;
        m_dcaMaxLevels = 3;
    }
    
    // Advanced Grid Methods
    bool OpenBuyGridAdvanced(ENUM_GRID_TYPE gridType) {
        switch(gridType) {
            case GRID_GEOMETRIC:
                return OpenGeometricBuyGrid();
            case GRID_ARITHMETIC:
                return OpenArithmeticBuyGrid();
            case GRID_FIBONACCI:
                return OpenFibonacciBuyGrid();
            case GRID_DYNAMIC:
                return OpenDynamicBuyGrid();
            default:
                return false;
        }
    }
    
    bool OpenSellGridAdvanced(ENUM_GRID_TYPE gridType) {
        switch(gridType) {
            case GRID_GEOMETRIC:
                return OpenGeometricSellGrid();
            case GRID_ARITHMETIC:
                return OpenArithmeticSellGrid();
            case GRID_FIBONACCI:
                return OpenFibonacciSellGrid();
            case GRID_DYNAMIC:
                return OpenDynamicSellGrid();
            default:
                return false;
        }
    }
    
    // Pyramiding Methods
    bool OpenBuyPyramid() {
        if(GetTotalBuyPositions() >= m_pyramidMaxLevels) return false;
        
        double lastBuyPrice = GetLastBuyPrice();
        double currentPrice = SymbolInfoDouble(m_symbol, SYMBOL_ASK);
        double totalLot = GetTotalBuyVolume();
        
        if(totalLot >= m_pyramidMaxLot) return false;
        
        if(currentPrice > lastBuyPrice + m_pyramidStep * Point()) {
            double nextLot = CalculatePyramidLot();
            return OpenPositionWithLot(ORDER_TYPE_BUY, nextLot);
        }
        return false;
    }
    
    bool OpenSellPyramid() {
        if(GetTotalSellPositions() >= m_pyramidMaxLevels) return false;
        
        double lastSellPrice = GetLastSellPrice();
        double currentPrice = SymbolInfoDouble(m_symbol, SYMBOL_BID);
        double totalLot = GetTotalSellVolume();
        
        if(totalLot >= m_pyramidMaxLot) return false;
        
        if(currentPrice < lastSellPrice - m_pyramidStep * Point()) {
            double nextLot = CalculatePyramidLot();
            return OpenPositionWithLot(ORDER_TYPE_SELL, nextLot);
        }
        return false;
    }
    
    // DCA (Dollar Cost Averaging) Methods
    bool OpenBuyDCA() {
        if(GetTotalBuyPositions() >= m_dcaMaxLevels) return false;
        
        double lastBuyPrice = GetLastBuyPrice();
        double currentPrice = SymbolInfoDouble(m_symbol, SYMBOL_ASK);
        
        if(currentPrice < lastBuyPrice - m_dcaStep * Point()) {
            double nextLot = CalculateDCALot(ORDER_TYPE_BUY);
            return OpenPositionWithLot(ORDER_TYPE_BUY, nextLot);
        }
        return false;
    }
    
    bool OpenSellDCA() {
        if(GetTotalSellPositions() >= m_dcaMaxLevels) return false;
        
        double lastSellPrice = GetLastSellPrice();
        double currentPrice = SymbolInfoDouble(m_symbol, SYMBOL_BID);
        
        if(currentPrice > lastSellPrice + m_dcaStep * Point()) {
            double nextLot = CalculateDCALot(ORDER_TYPE_SELL);
            return OpenPositionWithLot(ORDER_TYPE_SELL, nextLot);
        }
        return false;
    }
    
    // Position Management Methods
    bool ModifyBreakEven() {
        for(int i = PositionsTotal() - 1; i >= 0; i--) {
            ulong ticket = PositionGetTicket(i);
            if(PositionSelectByTicket(ticket)) {
                if(PositionGetString(POSITION_SYMBOL) == m_symbol && 
                   PositionGetInteger(POSITION_MAGIC) == m_magicNumber) {
                    
                    double openPrice = PositionGetDouble(POSITION_PRICE_OPEN);
                    double currentPrice = PositionGetInteger(POSITION_TYPE) == POSITION_TYPE_BUY ? 
                        SymbolInfoDouble(m_symbol, SYMBOL_BID) : 
                        SymbolInfoDouble(m_symbol, SYMBOL_ASK);
                    
                    double profit = PositionGetInteger(POSITION_TYPE) == POSITION_TYPE_BUY ? 
                        currentPrice - openPrice : 
                        openPrice - currentPrice;
                    
                    if(profit >= m_breakEvenProfit * Point()) {
                        double newSL = openPrice + (PositionGetInteger(POSITION_TYPE) == POSITION_TYPE_BUY ? 
                            m_breakEvenPadding * Point() : 
                            -m_breakEvenPadding * Point());
                            
                        ModifyPosition(ticket, newSL, PositionGetDouble(POSITION_TP));
                    }
                }
            }
        }
        return true;
    }
    
    bool ModifyTrailingStop() {
        for(int i = PositionsTotal() - 1; i >= 0; i--) {
            ulong ticket = PositionGetTicket(i);
            if(PositionSelectByTicket(ticket)) {
                if(PositionGetString(POSITION_SYMBOL) == m_symbol && 
                   PositionGetInteger(POSITION_MAGIC) == m_magicNumber) {
                    
                    double openPrice = PositionGetDouble(POSITION_PRICE_OPEN);
                    double currentPrice = PositionGetInteger(POSITION_TYPE) == POSITION_TYPE_BUY ? 
                        SymbolInfoDouble(m_symbol, SYMBOL_BID) : 
                        SymbolInfoDouble(m_symbol, SYMBOL_ASK);
                    
                    double profit = PositionGetInteger(POSITION_TYPE) == POSITION_TYPE_BUY ? 
                        currentPrice - openPrice : 
                        openPrice - currentPrice;
                    
                    if(profit >= m_trailingStart * Point()) {
                        double newSL = PositionGetInteger(POSITION_TYPE) == POSITION_TYPE_BUY ? 
                            currentPrice - m_trailingStep * Point() : 
                            currentPrice + m_trailingStep * Point();
                            
                        if(PositionGetDouble(POSITION_SL) == 0 || 
                           (PositionGetInteger(POSITION_TYPE) == POSITION_TYPE_BUY && newSL > PositionGetDouble(POSITION_SL)) ||
                           (PositionGetInteger(POSITION_TYPE) == POSITION_TYPE_SELL && newSL < PositionGetDouble(POSITION_SL))) {
                            ModifyPosition(ticket, newSL, PositionGetDouble(POSITION_TP));
                        }
                    }
                }
            }
        }
        return true;
    }
    
    bool ClosePartialPosition(double percentageToClose) {
        for(int i = PositionsTotal() - 1; i >= 0; i--) {
            ulong ticket = PositionGetTicket(i);
            if(PositionSelectByTicket(ticket)) {
                if(PositionGetString(POSITION_SYMBOL) == m_symbol && 
                   PositionGetInteger(POSITION_MAGIC) == m_magicNumber) {
                    
                    double volume = PositionGetDouble(POSITION_VOLUME);
                    double closeVolume = volume * percentageToClose;
                    
                    MqlTradeRequest request = {};
                    request.action = TRADE_ACTION_DEAL;
                    request.position = ticket;
                    request.symbol = m_symbol;
                    request.volume = closeVolume;
                    request.type = PositionGetInteger(POSITION_TYPE) == POSITION_TYPE_BUY ? 
                        ORDER_TYPE_SELL : ORDER_TYPE_BUY;
                    request.price = PositionGetInteger(POSITION_TYPE) == POSITION_TYPE_BUY ? 
                        SymbolInfoDouble(m_symbol, SYMBOL_BID) : 
                        SymbolInfoDouble(m_symbol, SYMBOL_ASK);
                    request.deviation = m_slippage;
                    
                    MqlTradeResult result = {};
                    return OrderSend(request, result);
                }
            }
        }
        return false;
    }
    
    // Grid Calculation Methods
private:
    enum ENUM_GRID_TYPE {
        GRID_GEOMETRIC,
        GRID_ARITHMETIC,
        GRID_FIBONACCI,
        GRID_DYNAMIC
    };
    
    bool OpenGeometricBuyGrid() {
        // Implementation for geometric progression grid
        return false;
    }
    
    bool OpenArithmeticBuyGrid() {
        // Implementation for arithmetic progression grid
        return false;
    }
    
    bool OpenFibonacciBuyGrid() {
        // Implementation for Fibonacci-based grid
        return false;
    }
    
    bool OpenDynamicBuyGrid() {
        // Implementation for dynamic grid based on volatility
        return false;
    }
    
    // Similar implementations for sell grids...
    
    double CalculatePyramidLot() {
        int positions = GetTotalBuyPositions() + GetTotalSellPositions();
        return m_lotSize * (1.0 + positions * 0.5);
    }
    
    double CalculateDCALot(ENUM_ORDER_TYPE type) {
        int positions = (type == ORDER_TYPE_BUY) ? GetTotalBuyPositions() : GetTotalSellPositions();
        return m_lotSize * MathPow(m_dcaMultiplier, positions);
    }
    
    bool ModifyPosition(ulong ticket, double sl, double tp) {
        MqlTradeRequest request = {};
        request.action = TRADE_ACTION_MODIFY;
        request.position = ticket;
        request.symbol = m_symbol;
        request.sl = sl;
        request.tp = tp;
        
        MqlTradeResult result = {};
        return OrderSend(request, result);
    }
    
    // Other helper methods remain the same...
};